/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/congestions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve congestion data
     * @description Returns traffic congestion data inferred from traffic cameras. Optionally filter by camera ID, time range, aggregate by time, and group by hour or day. By default, if no time range is specified in `begin`, `end` return only congestions ingested from the latest `updated_on` timestamp.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter congestion points by specific camera id. */
          camera_id?: string;
          /** @description Aggregation method applied to congestion rating. By default, no aggregation is performed. Has no effect if `groupby` is not specified. */
          agg?: "min" | "max" | "avg";
          /** @description Group congestion rating by hour or day. `agg` must also be specified to supply an aggregation method. */
          groupby?: "hour" | "day";
          /** @description Inclusive start of the time range (timestamp) to filter congestion data. If unspecified, defaults to the latest `updated_on` timestamp. */
          begin?: string;
          /** @description Exclusive end of the time range (timestamp) to filter congestion data. If unspecified, defaults to the latest `updated_on` timestamp. */
          end?: string;
          /** @description Filter congestion points by with congestion rating >= `min_rating`. */
          min_rating?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A list of congestion data */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Congestion"][];
          };
        };
        /** @description Invalid request parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/route": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retrieve recommended routes between source and destination
     * @description Returns a list of recommended routes from source to destination, including geometry, duration, distance, and step-by-step instructions.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            src: {
              /**
               * @description Specifies if the source is an address or a location
               * @enum {string}
               */
              kind: "address" | "location";
              address?: components["schemas"]["Address"];
              location?: components["schemas"]["Location"];
            };
            dest: {
              /**
               * @description Specifies if the destination is an address or a location
               * @enum {string}
               */
              kind: "address" | "location";
              address?: components["schemas"]["Address"] | null;
              location?: components["schemas"]["Location"] | null;
            };
            /**
             * @description Optional. Whether to incorporate traffic congestion ratings into route planning. By default, this is enabled.
             * @default true
             */
            congestion?: boolean;
          };
        };
      };
      responses: {
        /** @description List of recommended routes with details on geometry, duration, distance, and steps */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              routes?: {
                /** @description Polyline (precision 5) for drawing the entire route on a map */
                geometry: string;
                /**
                 * Format: float
                 * @description Estimated travel duration in seconds
                 */
                duration: number;
                /**
                 * Format: float
                 * @description Total travel distance in meters
                 */
                distance: number;
                steps: {
                  /** @description Name of the road */
                  name: string;
                  /**
                   * Format: float
                   * @description Estimated duration of the step in seconds
                   */
                  duration: number;
                  /**
                   * Format: float
                   * @description Travel distance of the step in meters
                   */
                  distance: number;
                  /** @description Polyline (precision 5) for drawing this step on a map */
                  geometry: string;
                  direction:
                    | (
                        | "uturn"
                        | "sharp right"
                        | "right"
                        | "slight right"
                        | "straight"
                        | "slight left"
                        | "left"
                        | "sharp left"
                      )
                    | null;
                  /**
                   * @description The type of maneuver to perform
                   * @enum {string}
                   */
                  maneuver:
                    | "turn"
                    | "new name"
                    | "depart"
                    | "arrive"
                    | "merge"
                    | "on ramp"
                    | "off ramp"
                    | "fork"
                    | "end of road"
                    | "use lane"
                    | "continue"
                    | "roundabout"
                    | "exit roundabout"
                    | "rotary"
                    | "exit rotary"
                    | "roundabout turn"
                    | "notification";
                  /** @description OSRM-style text instructions for this step */
                  instruction: string;
                  congestion: components["schemas"]["Congestion"] | null;
                }[];
              }[];
            };
          };
        };
        /** @description Invalid request parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description No location found for one or more addresses. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geocode/{postcode}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve location coordinates by postal code
     * @description Returns the geographical coordinates (latitude and longitude) for a given postal code.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Postal code to retrieve location coordinates for. */
          postcode: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Location coordinates for the provided postal code */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
        /** @description Invalid request parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description No Location for postcode found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Congestion
     * @description Traffic camera congestion rating.
     */
    Congestion: {
      /**
       * Camera
       * @description Traffic camera capturing traffic images
       */
      camera: {
        id: string;
        /** Format: date-time */
        captured_on: string;
        image_url: string;
        /** Format: date-time */
        retrieved_on: string;
        location: components["schemas"]["Location"];
      };
      /**
       * Rating
       * @description Traffic congestion rating
       */
      rating: {
        /** Format: date-time */
        rated_on: string;
        model_id: string;
        /** @description 0-1 congestion rating with 1 being 'most congested' */
        value: number;
      };
      /** Format: date-time */
      updated_on: string;
    };
    Address: {
      /** @description Full address text */
      text: string;
      /** @description Postal code of the source address */
      postcode: string;
    };
    Location: {
      /**
       * Format: float
       * @description Latitude of the location
       */
      latitude: number;
      /**
       * Format: float
       * @description Longitude of the location
       */
      longitude: number;
    };
    Error: {
      /** @description Error message */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
